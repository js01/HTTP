import{_ as s,o as a,c as n,O as p}from"./chunks/framework.efd27913.js";const i=JSON.parse('{"title":"最简单的http服务器","description":"","frontmatter":{},"headers":[],"relativePath":"最简单的http服务器.md","filePath":"最简单的http服务器.md"}'),l={name:"最简单的http服务器.md"},o=p(`<h1 id="最简单的http服务器" tabindex="-1">最简单的http服务器 <a class="header-anchor" href="#最简单的http服务器" aria-label="Permalink to &quot;最简单的http服务器&quot;">​</a></h1><p>在本教程的所有章节中，我们都只使用JavaScript和HTML来实现服务器和客户端。</p><p>在命令行使用fetch API充当客户端，在浏览器使用HTML页面充当客户端。使用node.js的http模块构建服务器。</p><p>下面为一个最简单的服务器示例，将这段代码保存到文件如1.js，然后在相同的目录打开命令行，运行node.js，不要关闭。再在浏览器中打开<code> http://localhost:8080</code> ，就看到了内容为<code>hello,world!</code>的h1标题。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;h1&gt;hello,world!&lt;/h1&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">,()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">running on http://localhost:8080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>这个示例不解析任何请求细节，任何请求都会返回相同的响应。</p><p>后面我们会根据请求的不同，而返回不同的响应。这其实就是HTTP的本质——构建不同的响应以处理不同的请求。</p>`,7),t=[o];function e(c,r,F,y,D,A){return a(),n("div",null,t)}const h=s(l,[["render",e]]);export{i as __pageData,h as default};
